# -*- coding: utf-8 -*-
"""idx_Partners.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kTNsUVMdBLNQP1nTR-CKGa2yywFY4vWp

# **Data Scientist - IDX Partners**

Latar Belakang Tugas

Projek dari sebuah lending company.
*   Membangun model yang dapat memprediksi credit risk menggunakan dataset yang disediakan oleh company yang terdiri dari data pinjaman yang diterima dan yang ditolak.

## **Menghubungkan dengan gdrive untuk mengakses data**
"""

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

!ls "/content/drive/My Drive/idx"

"""## **Import Library**"""

import itertools
import joblib
import os

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns; sns.set();

!pip install dython

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_selector as selector
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import classification_report, confusion_matrix
from dython.nominal import associations

"""# **Exploratory Data Analysis (EDA)**"""

data = pd.read_csv("/content/drive/My Drive/idx/loan_data_2007_2014.csv")

# Menampilkan 5 baris pertama dari data
data.head()

# Menampilkan ukuran baris dan kolom pada data
data.shape

# Deskripsi mengenai feature pada data
data_dict = pd.read_excel("/content/drive/My Drive/idx/LCDataDictionary.xlsx", sheet_name="LoanStats")
data_dict = data_dict[["Feature", "Description"]]
data_dict = data_dict.iloc[:78]
data_dict

# Statistik deskriptif untuk kolom numerik
data.describe()

# Menampilkan informasi umum tentang data
data.info()

def count_columns_by_dtype(df):
    # Fungsi ini akan menghitung jumlah kolom dengan jenis data yang sama dalam sebuah dataframe.
    dtype_count = df.dtypes.value_counts().to_dict()
    return dtype_count

dtype_count = count_columns_by_dtype(data)
print(dtype_count)

"""## **Menentukan Status Pinjaman**
Menentukan dan mengelompokkan pinjaman mana yang berkemungkinan untuk diterima ataupun ditolak.
Sehingga kategori yang bisa kita ambil diantaranya :
- Disetujui : Fully Paid
- Ditolak : Charged Off, Default, dan Does not meet the credit policy

Kita tidak bisa menggunakan `current` karena pinjaman tersebut masih berlangsung, begitu pula dengan `late` dan `in_grace_period`.
"""

# Mendefinisikan gaya font untuk judul
title_font = dict(size=20, weight="bold")

# Fungsi untuk plot distribusi hitungan dari sebuah variabel
def plot_count(df, y, title, **sns_kwargs):
    # Menghitung nilai hitungan dan persentase
    value_counts = df[y].value_counts()
    percentage = value_counts / value_counts.sum()
    percentage = percentage.apply("{:.2%}".format)

    # Membuat gambar (figure) dan mengatur judul
    fig, ax = plt.subplots(figsize=(14, 10))
    ax.set_title(title, fontdict=title_font)

    # Melakukan plot countplot menggunakan seaborn
    sns.countplot(data=df, y=y, order=value_counts.index, ax=ax, **sns_kwargs)
    ax.set_ylabel("")

    # Menampilkan distribusi persentase sebagai teks pada setiap bar
    for i, count in enumerate(value_counts):
        ax.text(count+100, i, f"{percentage[i]}", va='center')

    plt.show()

# Fungsi untuk plot distribusi dari sebuah variabel
def plot_distribution(df, x, title, **sns_kwargs):
    # Membuat gambar (figure) dan mengatur judul
    plt.figure(figsize=(14, 10))
    plt.title(title, fontdict=title_font)

    # Melakukan plot histogram menggunakan seaborn
    sns.histplot(data=df, x=x, kde=True, **sns_kwargs)
    plt.ylabel("")
    plt.show()

# Fungsi untuk plot boxplot dari dua variabel
def plot_boxplot(df, x, y, title, **sns_kwargs):
    # Membuat gambar (figure) dan mengatur judul
    plt.figure(figsize=(14, 10))
    plt.title(title, fontdict=title_font)

    # Melakukan plot boxplot menggunakan seaborn
    sns.boxplot(data=df, x=x, y=y, **sns_kwargs)
    plt.ylabel("")
    plt.show()

# Plot count untuk variabel "loan_status"
plt.figure(figsize=(8, 6))
sns.countplot(data=data, x="loan_status", order=data["loan_status"].value_counts().index[:4])
plt.title("Status Pinjaman")
plt.xlabel("Status Pinjaman")
plt.ylabel("Jumlah")
plt.show()

# Melakukan plot count untuk variabel "loan_status" dalam dataframe "data" dengan judul "Status Pinjaman"
plot_count(data, title="Status Pinjaman",  y="loan_status")

"""*  "Current" memiliki persentase sebesar 48.09%, yang menunjukkan bahwa sebagian besar pinjaman sedang berjalan (tidak ada keterlambatan pembayaran).
*  "Fully Paid" memiliki persentase sebesar 39.62%, yang menunjukkan bahwa sebagian besar pinjaman telah sepenuhnya dilunasi.
*  "Charged Off" memiliki persentase sebesar 9.11%, yang menunjukkan bahwa sebagian kecil pinjaman telah dinyatakan tidak bisa dipungut lagi.
*  "Late (31-120 days)" memiliki persentase sebesar 1.48%, yang menunjukkan adanya keterlambatan pembayaran selama 31-120 hari.
*  "In Grace Period" memiliki persentase sebesar 0.67%, yang menunjukkan adanya masa toleransi pembayaran.
*  "Does not meet the credit policy. Status:Fully Paid" memiliki persentase sebesar 0.43%, yang menunjukkan bahwa sebagian kecil pinjaman tidak memenuhi kebijakan kredit namun telah dilunasi sepenuhnya.
*  "Late (16-30 days)" memiliki persentase sebesar 0.26%, yang menunjukkan adanya keterlambatan pembayaran selama 16-30 hari.
*  "Default" memiliki persentase sebesar 0.18%, yang menunjukkan adanya kegagalan pembayaran.
*  "Does not meet the credit policy. Status:Charged Off" memiliki persentase sebesar 0.16%, yang menunjukkan bahwa sebagian kecil pinjaman tidak memenuhi kebijakan kredit dan dinyatakan tidak bisa dipungut lagi.
"""

# Tentukan kategori yang akan digunakan
approved_cat = ["Fully Paid"]
dissaproved_cat = [
    "Charged Off",
    "Default",
    "Does not meet the credit policy. Status:Fully Paid",
    "Does not meet the credit policy. Status:Charged Off"
]

# Ganti dengan label baru
def label_loan_status(value):
    if value in approved_cat:
        return 1
    return 0

# Menyaring dan terapkan fungsi
inter_df = data[data["loan_status"].isin(approved_cat + dissaproved_cat)].copy()
inter_df["loan_status"] = inter_df["loan_status"].apply(label_loan_status)

# Menampilkan visualisasi dengan judul "Status Pinjaman"
plot_count(inter_df, y="loan_status", title="Status Pinjaman")

"""Dapat dilihat dari hasil visualisasi menyatakan bahwa status pinjaman yang diterima lebih besar dari pada yang ditolak yaitu dengan perbandingan 80.04% dan 19.96%.

## **Status Pinjaman dan Besar Pinjaman Pokok yang Sudah Dibayarkan**
Principal adalah besar pinjaman pokok yang dipinjamkan kepada debitur. Dengan kata lain merupakan jumlah asli dari uang yang dipinjamkan. Orang yang mengalami gagal bayar kebanyakan belum dapat membayarkan uang pokok pembayaran hingga jatuh tempo, bisa dilihat dari distribusi pembayaran dibawah. Rata-ratanya hampir mencapai 0.
"""

plot_distribution(df=inter_df, x="total_rec_prncp", hue="loan_status", title="Status Pinjaman dan Besar Pinjaman Pokok yang Sudah Dibayar")

"""## **Status Pinjaman dan Total Uang yang Tidak Ditagihkan**
Charged off recoveries adalah total uang yang tidak bisa dibayarkan kepada perusahaan peminjam karena sudah lewat masa jatuh tempo sehingga perusahaan peminjam bisa melepas hak tagih utang tersebut dengan menjualnya ke perusahaan lain. Dari sini terlihat jelas bahwa orang dengan status pinjaman buruk lah yang paling banyak memiliki charge off recoveries.
"""

plot_distribution(df=inter_df, x="recoveries", hue="loan_status", title="Status Pinjaman dan Total Uang yang Tidak Ditagihkan")

"""## **Status Pinjaman dan Jumlah Pinjaman**
Rata-rata jumlah pinjaman terbanyak berada pada status `buruk`.
"""

x, y = "loan_status", "loan_amnt"
plot_boxplot(df=inter_df, x=x, y=y, title="Distribusi Total Pinjaman")
inter_df.groupby(x)[y].describe()

"""## **Status Pinjaman dan Total Pembayaran yang Diterima**
Tampak jelas apabila total pembayaran terbanyak berada pada pinjaman yang berstatus `baik`.
"""

x, y = "loan_status", "total_pymnt"
plot_boxplot(df=inter_df, x=x, y=y, title="Distribusi Total Pembayaran yang Diterima")
inter_df.groupby(x)[y].describe()

"""## **Tujuan Mengambil Pinjaman**
Lebih dari setengah peminjam memiliki tujuan untuk menutup pinjaman sebelumnya. Apabila dilihat dari jenisnya, tujuan untuk konsumsi lebih banyak daripada tujuan untuk bisnis, renovasi dan pendidikan.
"""

plot_count(inter_df, y="purpose", title="Tujuan Pinjaman")

"""## **Negara Asal Peminjam**
Peminjam sebagian besar berasal dari negara Kanada.

"""

plot_count(df=inter_df, y="addr_state", title="Negara Asal Peminjam")

"""## **Tingkat Pinjaman**
Pinjaman diberi tingkatan dari huruf abjad A sampai G, semakin mendekati G maka tingkat bunga yang dibayarkan lebih besar.
"""

x, y = "int_rate", "grade"
order = inter_df[y].sort_values().unique()
plot_boxplot(inter_df, x=x, y=y, title="Tingkat Pinjaman", order=order)
plot_count(df=inter_df, y=y, title="")
inter_df.groupby(y)[x].describe()

"""## **Status Kepemilikan Rumah**
Sebagian besar peminjam mendelegasikan rumahnya sebagai jaminan pinjaman, sedangkan hanya sedikit dari peminjam yang memiliki rumah sendiri.
"""

y = "home_ownership"
order = inter_df[y].sort_values().unique()
plot_count(df=inter_df, y=y, title="")

"""# **Prepocessing Data**"""

# Hitung korelasi tiap variabel dengan loan status
correlations = (inter_df.select_dtypes(exclude=object)
                         .corr())
correlations["loan_status"].abs().sort_values(ascending=False)

# Menghapus kolom
def remove_column(dataframe, column_name):
    dataframe = dataframe.drop(column_name, axis=1)
    return dataframe

# Menghapus kolom dengan korelasi < 0.01
column_to_remove = ['Unnamed: 0','acc_now_delinq', 'pub_rec', 'collections_12_mths_ex_med', 'tot_coll_amt']
df = remove_column(inter_df, column_to_remove)

# Hitung korelasi tiap variabel dengan loan status
correlations = (df.select_dtypes(exclude=object)
                         .corr())
correlations["loan_status"].abs().sort_values(ascending=False)

"""## **Missing Values**"""

def display_missing_values(dataframe):
    missing_values = dataframe.isnull().sum()
    total_rows = dataframe.shape[0]
    missing_percentage = (missing_values / total_rows) * 100
    missing_data = pd.concat([missing_values, missing_percentage], axis=1, keys=['Missing Values', 'Missing Percentage'])
    missing_data = missing_data[missing_data['Missing Values'] > 0]
    print(missing_data)

display_missing_values(df)

column_to_remove = ['annual_inc_joint','dti_joint','verification_status_joint','open_acc_6m',
                    'open_il_6m','open_il_12m','open_il_24m','mths_since_rcnt_il','total_bal_il',
                    'il_util','open_rv_12m','open_rv_24m','max_bal_bc','all_util','inq_fi','total_cu_tl',
                    'inq_last_12m','next_pymnt_d','mths_since_last_record','mths_since_last_major_derog',
                    'id','member_id','url','desc','mths_since_last_delinq','emp_title', 'title']

df1 = remove_column(df, column_to_remove)

display_missing_values(df1)

df1.info()

# Menghapus kolom yang memiliki semua unique value
unique_columns = [col for col in inter_df.columns if inter_df[col].nunique() == 1]
df2 = remove_column(df1, unique_columns)

display_missing_values(df2)

unique_columns

df2.info()

display_missing_values(df2)

# Informasi rinci mengenai kolom dan baris data
data_stat = pd.DataFrame()
data_stat.index = df2.columns
data_stat["unique_value"] = df2.nunique()
data_stat["missing_rate"] = df2.isna().mean()
data_stat["dtype"] = df2.dtypes
data_stat

"""## **Fitur Kategorikal**"""

# Kolom-kolom yang berdata kategorik
cat_features = df2.select_dtypes(include=object).columns
cat_features

"""### **Kolom yang berisikan tanggal**"""

date_cols = ["issue_d", "earliest_cr_line", "last_pymnt_d", "last_credit_pull_d"]

for col in date_cols:
    print(df2[col].value_counts().iloc[:5])
    print()

"""Tidak terdapat korelasi yang kuat antar tanggal serta tiap tanggal memiliki sedikit korelasi dengan status pinjaman. Namun kita akan menghapus fitur tanggal yang berkorelasi kurang dari 0.1 dengan status pinjaman"""

# Korelasi antar tanggal dan status pinjaman
used_cols = date_cols + ["loan_status"]
complete_correlation = associations(
    df2[used_cols],
    filename='date_correlation.png',
    figsize=(10,10)
)

# Fitur tanggal yang akan kita gunakan
affect_date_cols = ["issue_d", "last_pymnt_d", "last_credit_pull_d"]
affect_date_cols

# Hapus fitur tanggal yang tidak memiliki korelasi kuat dengan status pinjaman
unused_cols = ["earliest_cr_line"]
pre_df = df2.drop(columns=unused_cols, errors="ignore")
pre_df.head()

"""### **Kolom Kategorik yang Tidak Terpakai**"""

other_cat_cols = cat_features[~cat_features.isin(date_cols)]
other_cat_cols

pre_df.loc[:, other_cat_cols].head()

"""Beberapa kolom kategorikal yang tidak terpakai adalah:
- zip_code karena 3 angka dibelakangnya disensor
- sub_grade karena sudah memiliki kolom yang mirip yaitu grade
"""

unused_cols = ["zip_code", "sub_grade"]
pre_df = pre_df.drop(columns=unused_cols, errors="ignore")
pre_df.head()

# Hitung korelasi tiap variabel dengan loan status
correlations = (pre_df.select_dtypes(exclude=object)
                         .corr())
correlations["loan_status"].abs().sort_values(ascending=False)

other_cat_cols = cat_features[~cat_features.isin(date_cols + unused_cols)]
other_cat_cols

# Korelasi antar fitur kategorikal dan status pinjaman
used_cols = other_cat_cols.to_list() + ["loan_status"]
complete_correlation = associations(
    pre_df[used_cols],
    filename='cat_correlation.png',
    figsize=(10,10)
)

"""Fitur grade dan term memiliki sedikit korelasi dengan status pinjaman."""

# Fitur kategorikal yang akan kita gunakan
affect_cat_cols = ["grade", "term"]
affect_cat_cols

# Hapus fitur yang kurang berpengaruh
used_cols = ["grade", "term"]
unused_cols = other_cat_cols[~other_cat_cols.isin(used_cols)]
pre_df = pre_df.drop(columns=unused_cols, errors="ignore")
pre_df.head()

# Daftar kolom yang ingin diisi dengan nilai modus
kolom = ['annual_inc','delinq_2yrs',
         'inq_last_6mths','open_acc','revol_util',
         'total_acc','last_pymnt_d','last_credit_pull_d',
         'tot_cur_bal','total_rev_hi_lim']

# Iterasi melalui setiap kolom
for col in kolom:
    # Hitung modus
    modus = pre_df[col].mode()[0]
    # Mengisi nilai yang hilang dengan modus
    pre_df[col].fillna(modus, inplace=True)

pre_df.info()

"""Setelah dilakukan beberapa proses akhirnya diperoleh bahwa untuk kolom yang digunakan untuk ke tahap permodelan hanya 31 kolom dari 75 kolom. Kolom-kolom tersebut dianggap berpengaruh dan paling baik digunakan untuk memprediksi status peminjaman.

# **Permodelan**

### **Tentukan Label dan Fitur Data**
Label merupakan tingkat performa dari pinjaman yang berada pada kolom `loan_status`. Berhubung kolom tersebut memiliki beberapa kategori, kita sudah memilih dan menggabungkannya menjadi 2 kategori yaitu `baik` dan `buruk`.

Sebelumnya, kita perlu memisahkan label dan fitur dari data untuk kemudian dapat dilakukan pemisahan data.
"""

label = pre_df["loan_status"].copy()
features = pre_df.drop("loan_status", axis=1).copy()

label = pre_df["loan_status"].copy()
features = pre_df.drop("loan_status", axis=1).copy()

print("Label shape:")
print(label.shape)

print("Features shape:")
print(features.shape)

"""### **Praproses**"""

num_features = features.select_dtypes(exclude="object")
cat_features = features.select_dtypes(include="object")

# Normalisasi fitur numerik
num_features = (num_features - num_features.mean()) / num_features.std()
num_features

# OneHotEncode fitur kategorik
cat_features = pd.get_dummies(cat_features)
cat_features

# Gabungkan Fitur
features_full = pd.concat([num_features, cat_features], axis=1)

features_full.shape

"""### **Memisahkan Data**"""

X_train, X_test, y_train, y_test = train_test_split(features_full, label, test_size=0.2, random_state=42, stratify=label)

X_train.shape, y_train.shape

"""# **Model XGBClassifier**"""

from xgboost import XGBClassifier

# Membuat objek model XGBoost Classifier
xgboost = XGBClassifier()

# Melatih model menggunakan fitur dan label
xgboost.fit(X_train, y_train)

# Menggunakan model untuk melakukan prediksi
predictions = xgboost.predict(X_train)

"""## **Menyimpan Model**"""

import h5py
import joblib
# Simpan objek dalam format H5 menggunakan joblib
joblib.dump(xgboost, "xgboost.h5")

"""## **Evaluasi Model**

### **Baseline Model**
Kita akan membuat model prediksi paling sederhana yaitu dengan memprediksi seluruh data kategori terbanyak. Hal ini dilakukan supaya kita mendapatkan patokan, berapa performa minimal yang harus dilalui oleh model machine learning kita nantinya.
"""

test_label_counts = y_test.value_counts()
test_label_counts

test_label_counts.max() / test_label_counts.sum()

"""### **Metrik Klasifikasi**

### Train
"""

xgboost.score(X_train, y_train)

report = classification_report(y_true=y_train, y_pred=xgboost.predict(X_train))
print(report)

"""### Test"""

xgboost.score(X_test, y_test)

report = classification_report(y_true=y_test, y_pred=xgboost.predict(X_test))
print(report)

"""Hasil akurasi pada data test dan data train cenderung sama yaitu 0.996 dan 0.999 artinya model tidak mengalami overfithing. Sehingga model bisa digunakan dengan baik karena mencapai 99% pada akurasinya.

### Confusion Matrix
"""

conf = confusion_matrix(y_true=y_test, y_pred=xgboost.predict(X_test))

plt.figure(figsize=(10, 10))
sns.heatmap(conf, annot=True, fmt="g")
plt.show()

"""Dapat dilihat dari matriks akurasi yang diperoleh bahwa sebanyak 9088 peminjam terprediksi dengan benar yaitu status ditolak, sedangkan sebanyak 123 peminjam lainnya terprediksi salah yaitu dengan status diterima.


Selanjutnya sebanyak 36907 peminjam terprediksi benar dengan status diterima, sedangkan 41 peminjam lainnya terprediksi salah yaitu dengan status ditolak.

# **Kesimpulan**

*  Dari kedua model yang digunakan yaitu xgboots dan regresi logistik dapat disimpulkan bahwa kedua model tersebut sangat baik. Namun jika dibandingkan Xgboots memiliki hasil yang lebih baik dimana kesalahan dalam memprediksi lebih kecil sehingga dalam proses penerimaan atau penolakan peminjaman dapat lebih meminimalkan resiko yang ada pada perusahaan.

Kolom yang digunakan hanya 31 kolom dari 75 kolom. Keterangan 31 kolom yang digunakan :

*  loan_amnt (Pembayaran bulan lalu telah diterima): Jumlah pinjaman yang telah diberikan kepada peminjam dapat mempengaruhi kemampuan peminjam untuk membayar pinjaman tepat waktu. Semakin besar jumlah pinjaman, semakin tinggi risiko peminjam mengalami kesulitan dalam membayar kembali.

*  funded_amnt (Jumlah total yang berkomitmen untuk pinjaman tersebut pada saat itu): Jumlah total yang telah diputuskan untuk memberikan pinjaman pada saat itu dapat memberikan gambaran tentang ukuran dan risiko keseluruhan dari pinjaman tersebut.

*  funded_amnt_inv: menunjukkan jumlah total pinjaman yang diberikan kepada peminjam oleh investor pada saat pinjaman didanai. Jumlah ini mencerminkan sebagian dari total pinjaman yang dibiayai oleh para investor. Jumlah ini dapat bervariasi tergantung pada jumlah kontribusi dari masing-masing investor.


*  term (Jumlah pembayaran pinjaman. Nilai dalam bulan dan dapat berupa 36 atau 60): Jumlah tenor pinjaman (36 atau 60 bulan) dapat mempengaruhi risiko pembayaran pinjaman. Pinjaman dengan tenor yang lebih lama mungkin memiliki risiko lebih tinggi karena peminjam harus mempertahankan pembayaran yang stabil dalam waktu yang lebih lama.

*  int_rate (Menunjukkan apakah pendapatan diverifikasi oleh LC, tidak diverifikasi, atau jika sumber pendapatan diverifikasi): Tingkat suku bunga pinjaman dapat mempengaruhi kemampuan peminjam untuk membayar kembali pinjaman. Suku bunga yang tinggi dapat meningkatkan risiko keterlambatan pembayaran.

*  installment (Pembayaran bulanan yang harus dibayar oleh peminjam jika pinjaman berasal): Jumlah pembayaran bulanan yang harus dibayarkan peminjam mempengaruhi beban pembayaran bulanan. Pembayaran yang lebih tinggi mungkin mempengaruhi kemampuan peminjam untuk membayar tepat waktu.

*  grade (LC menetapkan nilai pinjaman): Grade pinjaman yang diberikan oleh platform pinjaman dapat mencerminkan tingkat risiko kredit. Grade yang lebih tinggi mungkin menunjukkan risiko yang lebih rendah.

*  annual_inc (Pendapatan tahunan yang dilaporkan sendiri yang diberikan oleh peminjam selama pendaftaran): Pendapatan tahunan peminjam dapat menunjukkan kemampuan peminjam untuk membayar pinjaman. Semakin tinggi pendapatan, semakin tinggi kemungkinan untuk membayar pinjaman tepat waktu.

*  issue_d (Bulan di mana pinjaman didanai): Waktu pemberian pinjaman dapat mempengaruhi status pinjaman. Pinjaman yang diberikan pada saat ekonomi yang baik mungkin memiliki risiko lebih rendah dibandingkan saat ekonomi sedang lesu.

*  loan_status: menunjukkan status saat ini dari pinjaman. Status ini mencerminkan apakah pinjaman masih aktif, telah lunas (lunas penuh), terlambat (telat membayar), atau bahkan telah macet (default). Informasi ini sangat penting dalam menganalisis kelayakan kredit dan risiko pinjaman.

*  dti (Debt-to-Income Ratio): Rasio ini adalah perbandingan antara total kewajiban keuangan peminjam (termasuk pembayaran utang lainnya) dengan pendapatan bulanan peminjam. Rasio ini memberikan gambaran tentang seberapa besar beban utang peminjam dalam kaitannya dengan pendapatan bulanan mereka. Semakin tinggi DTI, semakin tinggi risiko kredit karena peminjam mungkin kesulitan membayar utang.

*  delinq_2yrs (Jumlah insiden lewat jatuh tempo 30+ hari dalam file kredit peminjam selama 2 tahun terakhir): Riwayat keterlambatan pembayaran sebelumnya dapat menjadi indikator bagi peminjam yang berisiko tinggi.

*  inq_last_6mths (Jumlah pertanyaan dalam 6 bulan terakhir): Jumlah pertanyaan baru-baru ini pada kredit peminjam dapat mencerminkan kebutuhan keuangan mendesak dan risiko kredit.

*  open_acc (Jumlah jalur kredit terbuka dalam file kredit peminjam): Jumlah akun kredit yang terbuka dapat mencerminkan sejauh mana peminjam memiliki kewajiban keuangan lain yang dapat mempengaruhi kemampuan membayar pinjaman.

*  revol_bal (Total saldo bergulir kredit): Jumlah saldo tertunggak pada kredit bergulir dapat mempengaruhi kemampuan peminjam untuk membayar pinjaman.

*  revol_util (Tingkat pemanfaatan jalur bergulir, atau jumlah kredit yang digunakan peminjam relatif terhadap semua kredit bergulir yang tersedia): Tingkat pemanfaatan yang tinggi dapat menunjukkan risiko kredit yang lebih tinggi.

*  total_acc (Jumlah total jalur kredit yang saat ini ada dalam file kredit peminjam): Jumlah total jalur kredit dapat mencerminkan sejauh mana peminjam memiliki keterikatan keuangan dan potensi risiko kredit.

*  out_prncp (Sisa pokok pinjaman untuk jumlah total yang didanai): Sisa pokok pinjaman dapat menunjukkan seberapa banyak pinjaman yang telah dibayar oleh peminjam.

*  out_prncp_inv (Sisa pokok pinjaman untuk sebagian dari jumlah total yang didanai oleh investor): Sisa pokok pinjaman untuk sebagian pinjaman yang didanai oleh investor.

*  total_pymnt (Pembayaran yang diterima hingga saat ini untuk jumlah total yang didanai): Total pembayaran yang diterima hingga saat ini mencerminkan seberapa banyak pinjaman yang telah dilunasi.

*  total_pymnt_inv (Pembayaran yang diterima hingga saat ini untuk sebagian dari jumlah total yang didanai oleh investor): Total pembayaran yang diterima oleh investor untuk sebagian pinjaman yang didanai oleh investor.

*  total_rec_prncp (Prinsipal diterima hingga saat ini): Jumlah prinsipal yang telah diterima oleh peminjam hingga saat ini.

*  total_rec_int (Bunga diterima hingga saat ini): Jumlah bunga yang telah diterima oleh peminjam hingga saat ini.

*  total_rec_late_fee (Biaya keterlambatan diterima hingga saat ini): Total biaya keterlambatan yang telah diterima oleh peminjam hingga saat ini.

*  recoveries (Pemulihan): Pemulihan menunjukkan apakah rencana pembayaran telah disiapkan untuk pinjaman dan dapat mencerminkan tingkat risiko kredit.

*  collection_recovery_fee (post charge off collection fee): Biaya koleksi setelah penutupan akun dapat menunjukkan risiko kredit yang lebih tinggi.

*  last_pymnt_d (Pembayaran bulan lalu telah diterima): Informasi pembayaran terakhir yang diterima dapat mencerminkan keandalan peminjam dalam membayar pinjaman.

*  last_pymnt_amnt (Jumlah total pembayaran terakhir yang diterima): Jumlah total pembayaran terakhir yang diterima mencerminkan kemampuan peminjam untuk membayar.

*  last_pymnt_pull_d : menunjukkan tanggal terakhir pembayaran yang berhasil dilakukan oleh peminjam. Tanggal ini mencerminkan saat pembayaran terakhir diterima oleh pihak pemberi pinjaman atau platform pinjaman.

*  tot_cur_bal (Total saldo saat ini dari semua akun): Total saldo saat ini dari semua akun peminjam dapat mencerminkan kondisi keuangan peminjam secara keseluruhan.

*  total_rev_hi_lim: menunjukkan batas kredit total (limit) untuk semua akun kredit bergulir yang dimiliki oleh peminjam. Batas kredit ini mencerminkan jumlah maksimum yang diberikan oleh lembaga keuangan atau pemberi pinjaman kepada peminjam.
"""